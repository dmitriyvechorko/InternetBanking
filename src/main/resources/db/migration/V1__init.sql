create table users
(
    id                BIGINT GENERATED BY DEFAULT AS IDENTITY,
    username          VARCHAR(50) UNIQUE NOT NULL,
    password          VARCHAR(100)       NOT NULL,
    name              VARCHAR(255),
    surname           VARCHAR(255),
    patronymic        VARCHAR(255),
    birth_date        TIMESTAMPTZ,
    email             VARCHAR(100)       NOT NULL,
    mobile_phone      VARCHAR(15),
    address           VARCHAR(255),
    registration_date TIMESTAMPTZ        NOT NULL,
    status            VARCHAR(20) CHECK (status in ('Active', 'Blocked', 'Deleted')),
    role              VARCHAR(255) DEFAULT 'USER',
    primary key (id)
);

create table accounts
(
    id             BIGINT GENERATED BY DEFAULT AS IDENTITY,
    account_number VARCHAR(20) UNIQUE          NOT NULL,
    account_type   VARCHAR(20) CHECK ( account_type in ('Current', 'Savings', 'Credit')),
    balance        DECIMAL(15, 2) DEFAULT 0.00,
    currency       VARCHAR(3)                  NOT NULL,
    user_id        BIGINT                      NOT NULL,
    status         VARCHAR(20) CHECK (status in ('Active', 'Blocked', 'Closed')),
    created_at     TIMESTAMPTZ    DEFAULT CURRENT_TIMESTAMP,
    updated_at     TIMESTAMPTZ    DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
    primary key (id)
);

CREATE TABLE transactions
(
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY,
    from_account_id  BIGINT         NOT NULL,
    to_account_id    BIGINT         NOT NULL,
    transaction_date TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    amount           DECIMAL(15, 2) NOT NULL,
    transaction_type VARCHAR(20) CHECK (transaction_type IN ('Deposit', 'Withdrawal', 'Transfer')),
    description      TEXT,
    status           VARCHAR(20) CHECK (status IN ('Completed', 'Pending', 'Failed')),
    updated_at       TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (from_account_id) REFERENCES accounts (id) ON DELETE CASCADE,
    FOREIGN KEY (to_account_id) REFERENCES accounts (id) ON DELETE CASCADE,
    PRIMARY KEY (id)
);

CREATE TABLE cards
(
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    card_number     VARCHAR(16) NOT NULL UNIQUE,
    card_type       VARCHAR(20) CHECK (card_type IN ('Debit', 'Credit')),
    expiration_date TIMESTAMPTZ NOT NULL,
    cvv             VARCHAR(3)     DEFAULT '000',
    balance         DECIMAL(15, 2) DEFAULT 0.00,
    status          VARCHAR(20) CHECK (status IN ('ACTIVE', 'BLOCKED', 'EXPIRED')),
    account_id      BIGINT      NOT NULL,
    issued_at       TIMESTAMPTZ,
    updated_at      TIMESTAMPTZ    DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (account_id) REFERENCES accounts (id) ON
        DELETE CASCADE
);

CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS
$$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_accounts_updated_at
    BEFORE UPDATE
    ON accounts
    FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER set_transactions_updated_at
    BEFORE UPDATE
    ON transactions
    FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER set_card_updated_at
    BEFORE UPDATE
    ON cards
    FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();





